---
/**
 * Button component usage examples:
 * <Button label="Let's talk" href="/lets-talk" variant="primary" icon />
 * <Button label="Read case study" variant="outline" size="sm"><span slot="icon">ðŸš€</span></Button>
 */

import buttonMotionScript from '../assets/js/button-motion.ts?url';

interface Props {
  label: string;
  href?: string;
  icon?: boolean;
  variant?: 'outline' | 'primary';
  size?: 'sm' | 'md' | 'lg';
  ariaLabel?: string;
  newTab?: boolean;
}

const props = Astro.props as Props;
const {
  label,
  href: linkHref,
  icon = false,
  variant = 'primary',
  size = 'md',
  ariaLabel,
  newTab = false
} = props;

const hasIconSlot = Astro.slots.has('icon');
const showBuiltInIcon = icon === true && !hasIconSlot;

const buttonClasses = [
  'button',
  `button--${variant}`,
  `button--${size}`,
  (hasIconSlot || showBuiltInIcon) ? 'button--with-icon' : ''
]
  .filter(Boolean)
  .join(' ');

const rel = newTab ? 'noopener noreferrer' : undefined;
const target = newTab ? '_blank' : undefined;
const ariaLabelAttr = ariaLabel || undefined;
---
{linkHref ? (
  <a
    class={buttonClasses}
    href={linkHref}
    role="button"
    target={target}
    rel={rel}
    aria-label={ariaLabelAttr}
    data-animated-button
  >
    <span class="button__label">{label}</span>
    {hasIconSlot && (
      <span class="button__icon" data-button-icon aria-hidden="true">
        <slot name="icon" />
      </span>
    )}
    {!hasIconSlot && showBuiltInIcon && (
      <span class="button__icon" data-button-icon aria-hidden="true">
        <svg class="button__icon-arrow" viewBox="0 0 24 24" role="presentation">
          <path d="M5 12h12m0 0-4-4m4 4-4 4" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
        </svg>
      </span>
    )}
  </a>
) : (
  <button
    class={buttonClasses}
    type="button"
    aria-label={ariaLabelAttr}
    data-animated-button
  >
    <span class="button__label">{label}</span>
    {hasIconSlot && (
      <span class="button__icon" data-button-icon aria-hidden="true">
        <slot name="icon" />
      </span>
    )}
    {!hasIconSlot && showBuiltInIcon && (
      <span class="button__icon" data-button-icon aria-hidden="true">
        <svg class="button__icon-arrow" viewBox="0 0 24 24" role="presentation">
          <path d="M5 12h12m0 0-4-4m4 4-4 4" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
        </svg>
      </span>
    )}
  </button>
)}

<style>
  :host {
    display: inline-block;
  }

  .button {
    position: relative;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    border: 2px solid var(--secondary-color);
    background: transparent;
    color: var(--secondary-color);
    font-family: var(--font-family);
    font-size: var(--button-font-size, 64px);
    line-height: 1.1;
    font-weight: normal;
    text-decoration: none;
    cursor: pointer;
    transition: background-color 0.24s ease-out, color 0.24s ease-out;
    outline: none;

    &:hover,
    &:focus {
      background-color: var(--secondary-color);
      color: var(--primary-color);
    }
  }

  .button--with-icon .button__icon {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    transform: translateX(0);
  }

  .button--primary {
    padding: 18px 24px;
    text-transform: uppercase;
  }

  .button__icon-arrow {
    width: 1em;
    height: 1em;
  }

  .button:focus-visible {
    outline: 3px solid var(--primary-color, #fafafa);
    outline-offset: 4px;
  }

  .button[disabled] {
    opacity: 0.6;
    cursor: not-allowed;
  }

  @media (prefers-reduced-motion: reduce) {
    .button {
      transition: none;
    }
  }
</style>

<script type="module" src={buttonMotionScript}></script>
